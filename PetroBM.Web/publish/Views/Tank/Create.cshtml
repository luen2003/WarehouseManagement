@model PetroBM.Web.Models.TankModel
@using PetroBM.Common.Util;
@{
    ViewBag.Title = "Tạo mới bể";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            <div class="wrapper">
                @Html.LabelFor(model => model.Tank.TankName, htmlAttributes: new { @class = "control-label col-xs-2" })
                <div class="col-xs-3">
                    @Html.EditorFor(model => model.Tank.TankName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Tank.TankName, "", new { @class = "text-danger" })
                </div>
                @Html.Label(" ", htmlAttributes: new { @class = "control-label col-xs-1", @style = "text-align :left" })
            </div>

            @Html.LabelFor(model => model.Product.ProductName, htmlAttributes: new { @class = "control-label col-xs-2" })
            <div class="col-xs-3">
                @if (Model.ListProduct.Any())
                {
                    @Html.DropDownListFor(model => model.ProductId, new SelectList(Model.ListProduct, "ProductId", "ProductName", "") as SelectList, "Chọn... ", new { @class = "form-control" })
                }
                else
                {
                    @Html.DropDownListFor(model => model.ProductId, new SelectList(new List<string>()), "Chọn... ", new { @class = "form-control" })
                }
                @Html.Label(" ", htmlAttributes: new { @class = "control-label col-xs-1", @style = "text-align :left" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tank.HighLevel, htmlAttributes: new { @class = "control-label col-xs-2" })
            <div class="col-xs-3">
                @Html.EditorFor(model => model.Tank.HighLevel, new { htmlAttributes = new { @class = "input-number form-control" } })
                @Html.ValidationMessageFor(model => model.Tank.HighLevel, "", new { @class = "text-danger" })
            </div>
            @Html.Label(Constants.DIMENSION_MM, htmlAttributes: new { @class = "control-label col-xs-1", @style = "text-align :left" })

            @Html.LabelFor(model => model.Tank.HighHighLevel, htmlAttributes: new { @class = "control-label col-xs-2" })
            <div class="col-xs-3">
                @Html.EditorFor(model => model.Tank.HighHighLevel, new { htmlAttributes = new { @class = "input-number form-control" } })
                @Html.ValidationMessageFor(model => model.Tank.HighHighLevel, "", new { @class = "text-danger" })
            </div>
            @Html.Label(Constants.DIMENSION_MM, htmlAttributes: new { @class = "control-label col-xs-1", @style = "text-align :left" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tank.LowLevel, htmlAttributes: new { @class = "control-label col-xs-2" })
            <div class="col-xs-3">
                @Html.EditorFor(model => model.Tank.LowLevel, new { htmlAttributes = new { @class = "input-number form-control" } })
                @Html.ValidationMessageFor(model => model.Tank.LowLevel, "", new { @class = "text-danger" })
            </div>
            @Html.Label(Constants.DIMENSION_MM, htmlAttributes: new { @class = "control-label col-xs-1", @style = "text-align :left" })

            @Html.LabelFor(model => model.Tank.LowLowLevel, htmlAttributes: new { @class = "control-label col-xs-2" })
            <div class="col-xs-3">
                @Html.EditorFor(model => model.Tank.LowLowLevel, new { htmlAttributes = new { @class = "input-number form-control" } })
                @Html.ValidationMessageFor(model => model.Tank.LowLowLevel, "", new { @class = "text-danger" })
            </div>
            @Html.Label(Constants.DIMENSION_MM, htmlAttributes: new { @class = "control-label col-xs-1", @style = "text-align :left" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tank.HighMin, htmlAttributes: new { @class = "control-label col-xs-2" })
            <div class="col-xs-3">
                @Html.EditorFor(model => model.Tank.HighMin, new { htmlAttributes = new { @class = "input-number form-control" } })
                @Html.ValidationMessageFor(model => model.Tank.HighMin, "", new { @class = "text-danger" })
            </div>
            @Html.Label(Constants.DIMENSION_MM, htmlAttributes: new { @class = "control-label col-xs-1", @style = "text-align :left" })

            @Html.LabelFor(model => model.Tank.HighMax, htmlAttributes: new { @class = "control-label col-xs-2" })
            <div class="col-xs-3">
                @Html.EditorFor(model => model.Tank.HighMax, new { htmlAttributes = new { @class = "input-number form-control" } })
                @Html.ValidationMessageFor(model => model.Tank.HighMax, "", new { @class = "text-danger" })
            </div>
            @Html.Label(Constants.DIMENSION_MM, htmlAttributes: new { @class = "control-label col-xs-1", @style = "text-align :left" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tank.TemperatureLow, htmlAttributes: new { @class = "control-label col-xs-2" })
            <div class="col-xs-3">
                @Html.EditorFor(model => model.Tank.TemperatureLow, new { htmlAttributes = new { @class = "input-number form-control" } })
                @Html.ValidationMessageFor(model => model.Tank.TemperatureLow, "", new { @class = "text-danger" })
            </div>
            <label class="control-label col-xs-1" style="text-align :left">@Html.Raw(Constants.DIMENSION_TEMPERATURE)</label>

            @Html.LabelFor(model => model.Tank.TemperatureHigh, htmlAttributes: new { @class = "control-label col-xs-2" })
            <div class="col-xs-3">
                @Html.EditorFor(model => model.Tank.TemperatureHigh, new { htmlAttributes = new { @class = "input-number form-control" } })
                @Html.ValidationMessageFor(model => model.Tank.TemperatureHigh, "", new { @class = "text-danger" })
            </div>
            <label class="control-label col-xs-1" style="text-align :left">@Html.Raw(Constants.DIMENSION_TEMPERATURE)</label>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tank.LowFlow, htmlAttributes: new { @class = "control-label col-xs-2" })
            <div class="col-xs-3">
                @Html.EditorFor(model => model.Tank.LowFlow, new { htmlAttributes = new { @class = "input-number form-control" } })
                @Html.ValidationMessageFor(model => model.Tank.LowFlow, "", new { @class = "text-danger" })
            </div>
            <label class="control-label col-xs-1" style="text-align :left">@Html.Raw(Constants.DIMENSION_FLOW)</label>

            @Html.LabelFor(model => model.Tank.HighFlow, htmlAttributes: new { @class = "control-label col-xs-2" })
            <div class="col-xs-3">
                @Html.EditorFor(model => model.Tank.HighFlow, new { htmlAttributes = new { @class = "input-number form-control" } })
                @Html.ValidationMessageFor(model => model.Tank.HighFlow, "", new { @class = "text-danger" })
            </div>
            <label class="control-label col-xs-1" style="text-align :left">@Html.Raw(Constants.DIMENSION_FLOW)</label>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tank.VolumeMax, htmlAttributes: new { @class = "control-label col-xs-2" })
            <div class="col-xs-3">
                @Html.EditorFor(model => model.Tank.VolumeMax, new { htmlAttributes = new { @class = "input-number form-control" } })
                @Html.ValidationMessageFor(model => model.Tank.VolumeMax, "", new { @class = "text-danger" })
            </div>
            @Html.Label(Constants.DIMENSION_L, htmlAttributes: new { @class = "control-label col-xs-1", @style = "text-align :left" })

            @Html.LabelFor(model => model.Tank.ProductOffset, htmlAttributes: new { @class = "control-label col-xs-2" })
            <div class="col-xs-3">
                @Html.EditorFor(model => model.Tank.ProductOffset, new { htmlAttributes = new { @class = "input-number form-control" } })
                @Html.ValidationMessageFor(model => model.Tank.ProductOffset, "", new { @class = "text-danger" })
            </div>
            @Html.Label(Constants.DIMENSION_MM, htmlAttributes: new { @class = "control-label col-xs-1", @style = "text-align :left" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tank.WaterOffset, htmlAttributes: new { @class = "control-label col-xs-2" })
            <div class="col-xs-3">
                @Html.EditorFor(model => model.Tank.WaterOffset, new { htmlAttributes = new { @class = "input-number form-control" } })
                @Html.ValidationMessageFor(model => model.Tank.WaterOffset, "", new { @class = "text-danger" })
            </div>
            @Html.Label(Constants.DIMENSION_MM, htmlAttributes: new { @class = "control-label col-xs-1", @style = "text-align :left" })

            @Html.LabelFor(model => model.Tank.TemperatureOffset, htmlAttributes: new { @class = "control-label col-xs-2" })
            <div class="col-xs-3">
                @Html.EditorFor(model => model.Tank.TemperatureOffset, new { htmlAttributes = new { @class = "input-number form-control" } })
                @Html.ValidationMessageFor(model => model.Tank.TemperatureOffset, "", new { @class = "text-danger" })
            </div>
            <label class="control-label col-xs-1" style="text-align :left">@Html.Raw(Constants.DIMENSION_TEMPERATURE)</label>
        </div>

        <div class="form-group">
            @Html.Label("Kho", htmlAttributes: new { @class = "control-label col-xs-2" })
            <div class="col-xs-3">
                <select name="Tank.WareHouseCode" class="form-control">
                    @foreach (var item in Model.ListWareHouse)
                    {
                        <option value="@item.WareHouseCode">@item.WareHouseName</option>
                    }
                </select>

            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.Tank.Density, htmlAttributes: new { @class = "control-label col-xs-2" })
            <div class="col-xs-3">
                @Html.EditorFor(model => model.Tank.Density, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Tank.Density, "", new { @class = "text-danger" })
            </div>
            <label class="control-label col-xs-1" style="text-align :left">@Html.Raw(Constants.DIMENSION_DENSITY)</label>
        </div>*@

        <div class="form-group">
            <div class="col-xs-offset-2 col-xs-4">
                <input type="button" value="Tạo mới" class="btn btn-success" />
                <input type="button" value="Hủy" class="btn btn-primary" onclick="location.href='@Url.Action("Index")'" />
            </div>
        </div>
    </div>
}


@section scripts{
        @Scripts.Render("~/bundles/input-validate")
        <script>
            $(function () {
                AddCommas();

                $('.btn-success').click(function (e) {

                    $('.input-number').each(function (i, obj) {
                        $(this).val($(this).val().replace(/,/g, ''));
                    });

                    if ($('form').valid()) {
                        $('form').submit();
                    } else {
                        AddCommas();
                    };
                });
            });

            function AddCommas() {
                $('.input-number').each(function (i, obj) {
                    setInputNumber(obj);
                });
            }
        </script>
    }