@model PetroBM.Web.Models.CommandModel
@using Newtonsoft.Json
@using PetroBM.Common.Util
@{
    ViewBag.Title = "Kho " + Session[Constants.Session_WareHouseName] + " > Đăng ký lệnh";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using (Html.BeginForm("RegisterCommand", "Command", FormMethod.Post, new { @id = "frmRegister" }))

{
    @Html.AntiForgeryToken()

    <div class="container">
        <div class="col-md-5">
            <h4>Chi tiết lệnh</h4>
            <div>
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Command.CustomerCode, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-6">
                    @Html.EditorFor(model => model.Command.CustomerCode, new { htmlAttributes = new { @class = "form-control", @id = "IdCustomer", @autofocus = "autofocus" } })
                </div>
            </div>
            <div style="padding-top:10%;">
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Command.VehicleNumber, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-6">
                    @Html.EditorFor(model => model.Command.VehicleNumber, new { htmlAttributes = new { @class = "form-control", @id = "VehicleNumber", @onchange = "SearchVehicle()", @tabindex = "1" } })
                </div>
            </div>
            <div style="padding-top:10%">
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Command.DriverName, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-6">
                    @Html.EditorFor(model => model.Command.DriverName, new { htmlAttributes = new { @class = "form-control", @id = "DriverName", @onchange = "SearchDriver()", @tabindex = "2" } })
                </div>
            </div>
            <div style="padding-top:10%">
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Command.TimeOrder, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-6">
                    <div class='input-group date' id='datetimepicker' style="z-index:1;">
                        @Html.EditorFor(model => model.TimeOrder, new { htmlAttributes = new { @class = "form-control", @id = "TimeOrder", @readonly = "readonly" } })
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                </div>
            </div>

            <div style="padding-top:10%">
                <div class="col-md-6">
                    <label>Tên kho</label>
                </div>
                <div class="col-md-6">
                    <input class="form-control" value="@Session[Constants.Session_WareHouseName]" readonly="readonly" />

                </div>
            </div>

            <div style="padding-top:10%">
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Command.CardData, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-6">
                    @Html.EditorFor(model => model.Command.CardData, new { htmlAttributes = new { @class = "form-control", @id = "cardData", @readonly = "readonly" } })
                </div>
            </div>
            <div style="padding-top:10%">
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Command.CardSerial, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-6">
                    @Html.EditorFor(model => model.Command.CardSerial, new { htmlAttributes = new { @class = "form-control", @id = "cardserial", @readonly = "readonly", @onchange = "GetCardDataByCardSerial()" } })
                </div>
            </div>

            <div style="padding-top:10%">
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Command.CertificateNumber, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-6">
                    @Html.EditorFor(model => model.Command.CertificateNumber, new { htmlAttributes = new { @class = "form-control", @id = "certificateNumber", @readonly = "readonly" } })
                </div>
            </div>
            <div style="padding-top:10%">
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Command.CertificateTime, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-6">
                    <div class='input-group date' id='jCertificateTime'>
                        @Html.EditorFor(model => model.CertificateTime, new { htmlAttributes = new { @class = "form-control", @id = "certificateTime", @tabindex = "3" } })
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                </div>
            </div>


            <div style="padding-top:10%">
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Command.Description, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-6">
                    @Html.EditorFor(model => model.Command.Description, new { htmlAttributes = new { @class = "form-control", @id = "Description", @tabindex = "4" } })
                </div>
            </div>

            <div style="padding-top:10%">
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Command.GGT, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-6">
                    @Html.EditorFor(model => model.Command.GGT, new { htmlAttributes = new { @class = "form-control", @id = "GGT", @tabindex = "5" } })
                </div>
            </div>

            <div style="padding-top:10%">
                @*<div class="col-md-6">
                @Html.LabelFor(model => model.Command.EnvironmentTax, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-6">
                @Html.CheckBoxFor(model => model.Command.EnvironmentTax, new { Style = "vertical-align:3px}", @checked = false, @tabindex = "6" })
            </div>*@
            </div> 

            <div>
                <div id="warningcommand" class="col-md-12 " style="color:red;font-size: large;"></div>

            </div>
            <div style="color:red;visibility:hidden" id="warningvehicle">
                <h4>Cảnh báo phương tiện</h4>
            </div>

            <div style="padding-top:1%">

                <div class="col-md-6" id="savetycertificatesexpire" style="visibility:hidden;color:red">
                    <b>Hết hạn chứng chỉ an toàn</b>
                </div>
                <div class="col-md-6" id="driverlicenseexpire" style="visibility:hidden;color:red">
                    <b>Hết hạn bằng lái</b>
                </div>
            </div>
            <div style="padding-top:2%">
                <div class="col-md-6" id="expiredate" style="visibility:hidden;color:red">
                    <b>Hết hạn lưu hành</b>
                </div>
                <div class="col-md-6" id="accreditationexpire" style="visibility:hidden;color:red">
                    <b>Hết hạn kiểm định</b>
                    <b id="accreditationexpiredate"></b>
                </div>
                <div class="col-md-6" id="firepreventeexpire" style="visibility:hidden;color:red">
                    <b>Hết hạn giấy phép</b>
                </div>
            </div>
        </div>
        <div class="col-md-7">
            <h4>Lượng hàng theo từng loại hàng</h4>

            <div id="ProductTable">
                <table style="width:90% " class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>STT</th>
                            <th>Hàng hóa</th>
                            <th style="display:none">Chiết khấu</th>
                            <th>Ngăn</th>
                            <th>Tổng số lượng</th>
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>Tổng</th>
                            <th><div id="lblTotalWareHouse">0</div></th>
                            <th style="display:none"><div id="discount"></div></th>
                            <th><div id="lblTotalVolume">0</div></th>
                            <th><div id="lblQuality">0</div></th>

                        </tr>
                    </tfoot>
                    <tbody>
                        @{
                            for (int i = 0; i < Model.ListProduct.Count; i++)
                            {
                                <tr>
                                    <td>
                                        <input style="width:100%;border:white;" value="@(i + 1)" type="text" disabled="disabled" />
                                    </td>
                                    <td>
                                        <input style="width:100%;border:white" value="@Model.ListProduct[i].ProductName" type="text" name="[@i].ProductName" readonly />
                                    </td>
                                    <td style="display:none">
                                        <input style="width:100%; border: white" tabindex="@(i*2+7)" id="Discount_@i" type="text" name="[@i].Discount" />
                                    </td>
                                    <td>
                                        <input style="width:100%;border:white" tabindex="@(i*2+8)" id="Volume_@i" class="volume" value="" type="text" onkeyup="Textchange()" name="[@i].Volume" />
                                    </td>
                                    <td><input style="width:100%;border:white;" value="0" type="text" name="[@i].Amount" disabled="disabled" /></td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>

            <br />
            <div style="padding-top:1%">
                <h4>Lượng hàng theo từng ngăn</h4>
            </div>
            <div id="CommandDetail"></div>
            <div>
                <h4 id="warningwarehouse" style="color:red"></h4>
            </div>
            <div id="Status" style="display:none">
                0
            </div>
            <div>
                <button type="button" class="btn btn-success" tabindex="99" onclick='Validation();' id="btnSave">Lưu</button>
                <button type="button" class="btn btn-primary" tabindex="100" onclick="location.href='@Url.Action("Index")'">Hủy</button>

            </div>
        </div>
    </div>

    <div class="container" id="commandoutput" style="visibility:hidden">
        <div>
            <div class="col-md-6">
                <span><b>UBND THÀNH PHỐ HẢI PHÒNG</b></span><br />
                <span><b>CÔNG TY TNHH MTV DẦU KHÍ HẢI LINH HẢI PHÒNG</b></span>
            </div>
            <div class="col-md-6">
                <span><b>CỘNG HÒA XÃ HỘI CHỦ NGHĨA VIỆT NAM</b></span><br />
                <span><b>Độc lập - Tự do - Hạnh phúc</b></span>
            </div>
        </div>
        <div id="commandtittle">

        </div>
        <div class="container" id="commandtable">

        </div>
        <div class="container" style="padding-top:2%">
            <span><b>NGƯỜI LẬP PHIẾU</b></span>
            <span style="padding-left:6%"><b>NGƯỜI NHẬN HÀNG</b></span>
            <span style="padding-left:6%"><b>BẢO VỆ KIỂM TRA</b></span>
            <span style="padding-left:6%"><b>GIÀN XUẤT</b></span>
            <span style="padding-left:8%"><b>THỦ TRƯỞNG ĐƠN VỊ</b></span>
        </div>
    </div>
}

<script src="~/Scripts/jquery-2.2.4.min.js"></script>
<script src="~/Scripts/Autocomplete/jquery.easy-autocomplete.js"></script>
<link href="~/Scripts/Autocomplete/easy-autocomplete.css" rel="stylesheet" />

<script type="text/javascript">
    $(function () {
        $('#datetimepicker').datetimepicker({ format: 'DD/MM/YYYY HH:mm' });
        $('#jCertificateTime').datetimepicker({format: 'DD/MM/YYYY HH:mm' });

        //$('#jCertificateTime').on('changeDate', function (ev) {
        //    $(this).datepicker('hide');
        //});
        $('#jCertificateTime').on("dp.hide", function (e) {
            $('#Command_EnvironmentTax').focus();

        });

		if (@Model.ExportMode == @Constants.EXPORT_MODE_WORKORDER) {
			$("#cardserial").prop("disabled", true);
			$("#IdCustomer").focus();
		}
    });

</script>

<script type="text/javascript">

    var listJson;

    function Textchange() {
        var strTotal = '';
        var strCheck = ''
        var arr = [];
        for (var i = 0 ; i < listJson.length ; i++) {
            arr[i] = listJson[i].Volume;
        }
        var intcount = 0;

        $('#ProductTable').find('input[type=text],select').each(function () {
            if (intcount % 5 == 3) {// chỉ xét Input Text tại cột Ngăn
                if ($(this).val().length > 0) {
                    strTotal = strTotal + $(this).val();
                    strCheck = $(this).val();
                }
            }
            intcount = intcount + 1;
        });
        //Trường hợp không nhập ngăn nào hoặc đã xóa hết
        //if (strTotal.length == 0) {
        //    ClearValueDiv('#CommandDetail', 'input[type=text],select');
        //    return false;
        //}
        ClearValueDiv('#CommandDetail', 'input[type=text],select');

        var arrChk = strTotal.split("");
        intcount = 0;
        if (arrChk.length == 0) {
            GetListVolume();
            SumTotal(0,0)
            return false;
        }
        //if (arrChk[0] == "0") {
        //    alert('Không có ngăn 0 trong xe');
        //    return false;
        //}
        //for (var i = 0; i < arrChk.length; i++) {
        //    if (arrChk[i] == 0) {
        //        var warning = '';
        //        document.getElementById('warningwarehouse').textContent = "Không có ngăn 0 trong xe";
        //        document.getElementById('Status').innerHTML = "2";
        //        return false;
        //    }
        //}

        for (var i = 0; i < arrChk.length; i++) {
            if (arrChk[i] > arr.length || arrChk[i] == 0 ) {
                var warning = '';
                document.getElementById('warningwarehouse').textContent = "Cảnh báo xe không có ngăn " + arrChk[i] ;
                document.getElementById('Status').innerHTML = "2";
                return false;
            }
        }

        for (var i = 0; i < arr.length; i++) {
            intcount = 0;
            for (var j = 0; j < arrChk.length; j++) {
                if (arr[i] == arrChk[j]) {
                    intcount = intcount + 1;
                }
                if (intcount == 2) {
                    var warning = '';
                    document.getElementById('warningwarehouse').textContent = "Cảnh báo ngăn " + arr[i] +"  trùng nhau";
                    document.getElementById('Status').innerHTML ="1";
                    return false;
                }
                document.getElementById('Status').innerHTML ="0";
                document.getElementById('warningcommand').style.visibility = "hidden";
            }
        }
        // return true;
        var arr = [];
        var intRow=0;
        var intCol=0;
        var k=0;
        intcount = 0;
        $('#ProductTable').find('input[type=text],select').each(function () {
            if (intcount % 5 == 0) {
                arr[intRow] = [];
            }
            if ($(this).val().length>0){
                arr[intRow][intCol] = $(this).val();
            }
            else {
                arr[intRow][intCol] = '';
            }


            intcount = intcount + 1;
            intCol = intCol + 1;

            if (intcount % 5==0){
                intRow = intRow + 1;
                intCol = 0;
            }

        });



        //Kiểm tra có thêm vị trí nào có 2 ký tự trở  thêm vào mảng
        for (var m = 0; m < intRow; m++) {
            if (arr[m][3].length > 1) {
                var arrSplit = arr[m][3].split("");
                arr[m][3] = arrSplit[0];//Gán lại 1 ký tự thôi
                for (var h = 1; h < arrSplit.length; h++) { //Lấy bắt đầu từ phần tử thứ 2
                    arr[intRow + h-1] = [];
                    arr[intRow + h-1][0] = arr[m][0];
                    arr[intRow + h-1][1] = arr[m][1];
                    arr[intRow + h-1][3] = arrSplit[h];
                    arr[intRow + h - 1][4] = arr[m][4];
                }
                intRow = intRow + arrSplit.length - 1;
            }
        }

        //Chèn dữ mã hàng hóa vào phần Lượng hàng theo từng ngăn
        //Đưa vào mảng
        var arrVolume = [];
        var intRowVolume = 0;
        intCol = 0;
        k = 0;
        intcount = 0;
        $('#CommandDetail').find('input[type=text],select').each(function () {
            if (intcount % 4 == 0) {
                arrVolume[intRowVolume] = [];
            }
            if ($(this).val().length > 0) {
                arrVolume[intRowVolume][intCol] = $(this).val();
            }
            else {
                arrVolume[intRowVolume][intCol] = '';
            }
            intcount = intcount + 1;
            intCol = intCol + 1;

            if (intcount % 4 == 0) {
                intRowVolume = intRowVolume + 1;
                intCol = 0;
            }

        });
        //Xóa đi tạo lại
        // Join 2 bảng thông qua trường Ngăn arr ở vị trí 4, arrVolume ở vị ví 1
        for (var i = 0; i < intRow; i++) {
            for (var j = 0; j < intRowVolume; j++) {
                if (arr[i][3] == arrVolume[j][0]) {
                    SetValueDiv('#CommandDetail','input[type=text],select', j * 4 + 2, arr[i][1]);
                    SetValueDiv('#CommandDetail', 'input[type=text],select', j * 4 + 3, arrVolume[j][1]);
                    arrVolume[j][3] = arrVolume[j][1];
                    arrVolume[j][2] = arr[i][1];
                }
            }
        }

        GetListVolume();

        //Tính tổng các ngăn
        var dt = 0;
        var sn = 0;
        for (var j = 0; j < intRowVolume; j++) {
            if (arrVolume[j][2] != "") {
                dt = dt + eval(arrVolume[j][1]);
                sn = sn + 1;
            }

        }
        SumTotal(dt, sn);

        var arrwarehouse = [];
        var intCountnumberwarehouse=0;
        var z=0;

        $('#CommandDetail').find('input[type=text],select').each(function () {
            if (intCountnumberwarehouse % 4 == 1) {
                arrwarehouse[z]=$(this).val()
                z=z+1;
            }
            intCountnumberwarehouse=intCountnumberwarehouse+1;
        });

        if (sn < arrwarehouse.length) {
            document.getElementById('warningwarehouse').textContent = "Cảnh báo xe còn ngăn trống";
        }

        else {
            document.getElementById('warningwarehouse').textContent = "";
        }




    }
    function SetValueDiv(tagDiv, inputObject, pos, valu) {
        var intcount = 0;
        $(tagDiv).find(inputObject).each(function () {
            if (pos == intcount) {
                $(this).val(valu);
            }
            intcount = intcount + 1;
        });
        return false;
    }

    function ClearValueDiv(tagDiv, inputObject) {
        var intcount = 0;
        $(tagDiv).find(inputObject).each(function () {
            if (intcount % 4 == 2 || intcount % 4 == 3) {
                $(this).val('');
            }
            intcount = intcount + 1;
        });
        return false;
    }

    function Print(){

        var vehiclenumber =  document.getElementById('VehicleNumber').value ;
        var timeorder = document.getElementById('TimeOrder').value;
        var cusst = document.getElementById('IdCustomer').value;
        var lblquality = document.getElementById('lblQuality').value;
        console.log(listJson);

        for (var i = 0; i < DataCustomer.length ; i++) {
            if ( cusst == DataCustomer[i].name) {
                var customername = DataCustomer[i].type;
            }
        }
        var arr = [];
        var intCountnumber=0;
        var k=0;
        $('#ProductTable').find('input[type=text],select').each(function () {
            if (intCountnumber % 4 == 2) {
                arr[k]=$(this).val()
                k=k+1;
            }
            intCountnumber=intCountnumber+1;
        });
        var productarr = [];
        for (var p = 0; p < arr.length; p++) {
            var res = arr[p].toString();
            var ress = res.split("");
            productarr.push(ress);
        }
        var productarr1 = (productarr[0].concat(productarr[1])).concat(productarr[2]);

        var arr1 = [];
        var intCountnumber1=0;
        var l=0;
        $('#ProductTable').find('input[type=text],select').each(function () {
            if (intCountnumber1 % 4 == 1) {
                arr1[l]=$(this).val()
                l=l+1;
            }
            intCountnumber1=intCountnumber1+1;
        });
        console.log(arr1);

        document.getElementById('commandtittle').innerHTML = "";
        var div = "";
        div += "<center>";
        div += " <span style='font-size:25px;'><b>LỆNH XUẤT HÀNG</b></span><br />";
        div += "<span><b>Ngày "+timeorder+" Số 219</b></span><br />";
        div += "   <span>Số xe vào nhận hàng : <b>"+vehiclenumber+"</b>  Người nhận hàng :</span><br />";
        div += " <span>Khách hàng : <b>"+customername+"</b></span>";
        div += "</center>";

        document.getElementById('commandtittle').innerHTML = div;



        document.getElementById('commandtable').innerHTML ="";
        var commandcode = document.getElementById('CommandCode').value;
        var tr ="";
        tr = "<table cellpadding = '1' cellspacing = '0' style='width:100%' border='1'>";
        tr = tr + "<thead><tr>";
        tr = tr + "<th>STT</th>";
        /*tr = tr + " <th>Mã lệnh</th>";*/
        tr = tr + "<th>Ngăn số</th>";
        tr = tr + "<th>Hàng hóa</th>";
        tr = tr + " <th>Lượng hàng</th>";
        tr = tr + "<th>Người đóng hàng</th></tr></thead>";
        tr = tr + "<tbody>";

        for (var m = 0;m < productarr1.length ; m++) {
            tr = tr + "<tr>";
            tr = tr + "<td><input style='width:100%;border:white;' value=" + (m+1) + " type='text' readonly='readonly' /></td>";
            tr = tr + "<td><input style='width:100%;border:white;' value=" + commandcode+ " type='text' readonly='readonly' /></td>";
            tr = tr + "<td><input style='width:100%;border:white;' value='"+productarr1[m]+"' type='text' readonly='readonly' /></td>";
            tr = tr + "<td><input style='width:100%;border:white;' value='' type='text' readonly='readonly' /></td>";
            tr = tr + "<td><input style='width:100%;border:white;' value=" + lblquality + " type='text' readonly='readonly' /></td>";
            tr = tr + "<td><input style='width:100%;border:white;' value="+listJson[m].Quality+" type='text' readonly='readonly' /></td>";
            tr = tr + "</tr>";
        }
        tr = tr + "</tbody>";

        tr = tr + "<tfooter><tr>";
        tr = tr + "<td></td>";
        tr = tr + "<td></td>";
        tr = tr + "<td></td>";
        tr = tr + "<td><b>Tổng số</b></td>";
        tr = tr + "<td>"+lblquality +"</td>";
        tr = tr + "<td></td>";
        tr = tr + "</tr></tfoot>";

        tr = tr + "</table>"
        document.getElementById("commandtable").innerHTML = tr;




        var divToPrint=document.getElementById('commandoutput');

        var newWin=window.open('','Print-Window');

        newWin.document.open();

        newWin.document.write('<html><head> <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css" /></head><body onload="window.print()">'+commandoutput.innerHTML+'</body></html>');

        newWin.document.close();

        setTimeout(function(){newWin.close();},10);
    }


    function SearchVehicle() {
        $.post("@Url.Action("Detail", "Vehicle")", { identificationNumber: document.getElementById('VehicleNumber').value }, function (data) {
            listJson = data;
            InitVolume(listJson);
            ResetProductTable();  //Reset bảng hàng hóa

            GetCard();
            GetDriverName();
        });
        return true;
    }

    function SearchDriver() {
        var drivername = $("#DriverName").val();
        var chk = false;
                    $.ajax({
                        url: '/Driver/GetInformationCompareDriverName/',
                        type: 'GET',
                        data: {
                            "driverName"  : drivername
                        },
                        dataType: 'json',
                        success: function (data) {
                            if (data!="") {
                                if (data.BoolDriversLicenseExpire==true){
                                    chk = true;
                                    $("#driverlicenseexpire").css("visibility","visible");
                                }
                                else
                                    $("#driverlicenseexpire").css("visibility","hidden");

                                if (data.BoolSavetyCertificatesExpire==true){
                                    chk = true;
                                    $("#savetycertificatesexpire").css("visibility","visible");
                                }
                                else
                                    $("#savetycertificatesexpire").css("visibility","hidden");
                            }
                            //set focus to first discount
                            $("#Discount_0").focus();
                        },
                        error: function (err) {
                            alert("Error: " + err.responseText);
                        }
                    });
        if (chk==true){
                        $("#warningvehicle").css("visibility","visible");
        }
                $("#DriverName").focus();
        return true;
    }

    function Loadtotal() {
        const inputs = document.querySelectorAll('input[name*="V_Preset"]');

        let total = 0; // Biến để lưu tổng giá trị "Số lượng"

        // Duyệt qua các input và cộng dồn giá trị
        inputs.forEach(input => {
            const value = parseFloat(input.value) || 0;  // Chuyển giá trị thành số, nếu rỗng hoặc không hợp lệ thì là 0
            total += value;  // Cộng dồn giá trị vào tổng
        });
        document.getElementById("lblTotalSL").innerHTML = total; 
    }

    function InitVolume(Json) {
        document.getElementById("CommandDetail").innerHTML = "";
        var strListVolume = "";
        if (Json.length>=1) {

            var tr;
            tr = "<table style='width:90%' class='table table-striped table-bordered' id='table' >"
            tr = tr + "<thead><tr>";
            tr = tr + "<td>Mã ngăn</td>";
            tr = tr + "<td>Dung tích thực</td>";
            tr = tr + "<td>Hàng hóa</td>";
            tr = tr + "<td>Số lượng</td></tr></thead>";
            tr = tr + "<tbody>";
            for (var i = 0; i < Json.length; i++) {
                tr = tr + "<tr>";
                tr = tr + "<td><input style='width:100%;border:white;text-align:right' value=" + Json[i].Volume + " type='text' readonly='readonly' /></td>";
                tr = tr + "<td><input style='width:100%;border:white;text-align:right' value=" + Json[i].Amount + " type='text' readonly='readonly' /></td>";
                tr = tr + "<td><input style='width:100%;border:white;text-align:right' value='" + Json[i].ProductName + "' type='text' readonly='readonly' /></td>";
                tr = tr + "<td><input style='width:100%;border:white;text-align:right' name='[" + i + "].V_Preset' value=" + Json[i].Quality + " type='text' onchange='Loadtotal()' /></td>";
                tr = tr + "</tr>";
                strListVolume += Json[i].Volume;
            }
            tr = tr + "</tbody>";

            tr = tr + "<tfooter><tr>";
            tr = tr + "<td style='text-align:right'>Tổng</td>";
            tr = tr + "<td><div id='lblTotalDT' style='text-align:right'></div></td>";
            tr = tr + "<td><div id='lblTotalSN' style='text-align:right'></div></td>";
            tr = tr + "<td><div id='lblTotalSL' style='text-align:right'>0</div></td>";
            tr = tr + "</tr></tfoot>";

            tr = tr + "</table>"
            document.getElementById("CommandDetail").innerHTML = tr;
        }
    }


    //Xóa và khởi tạo lại table
    function GenTable(Json) {
        document.getElementById("CommandDetail").innerHTML = "";
        if (Json.length>1) {
            var tr;
            tr = "<table style='width:90%' class='table table-striped table-bordered'>"
            tr = tr + "<thead><tr>";
            tr = tr + "<td>Mã ngăn</td>";
            tr = tr + "<td>Dung tích thực</td>";
            tr = tr + "<td>Hàng hóa</td>";
            tr = tr + "<td>Số lượng</td></tr></thead>";
            tr = tr + "<tbody>";
            for (var i = 0; i < Json.length; i++) {
                tr = tr + "<tr>";
                tr = tr + "<td><input style='width:100%;border:white;' value=" + Json[i].Volume + " type='text' readonly='readonly' /></td>";
                tr = tr + "<td><input style='width:100%;border:white;' value=" + Json[i].Amount + " type='text' readonly='readonly' /></td>";
                tr = tr + "<td><input style='width:100%;border:white;' value='" + Json[i].ProductName + "' type='text' readonly='readonly' /></td>";
                tr = tr + "<td><input style='width:100%;border:white;' value=" + Json[i].Quality + " type='text' readonly='readonly' /></td>";
                tr = tr + "</tr>";
            }
            tr = tr + "</tbody>";

            tr = tr + "<tfooter><tr>";
            tr = tr + "<td>Tổng</td>";
            tr = tr + "<td><div id='lblTotalDT'></div></td>";
            tr = tr + "<td><div id='lblTotalSN'></div></td>";
            tr = tr + "<td><div id='lblTotalSL'>0</div></td>";
            tr = tr + "</tr></tfoot>";

            tr = tr + "</table>";
            tr = tr + "<div>";
            tr = tr + "    <h4 id='warningwarehouse; style='color: red'></h4>";
            tr = tr + "</div>";
            tr = tr + "<div id='Status' style='display:none'>";
            tr = tr +  0
            tr = tr + "</div>";
            @*tr = tr + "<div>";
                <button type="button" class="btn btn-success" tabindex="5" onclick='Validation()' id="btnSave">Lưu</button>
                <button type="button" class="btn btn-primary" tabindex="6" onclick="location.href='@Url.Action("Index")'">Hủy</button>

            tr = tr + "</div>*@

            document.getElementById("CommandDetail").innerHTML = tr;
        }
        //  Textchange();
    }
    //Tính lại tổng  cho từng ngăn
    function SumTotal(dt,sn)
    {

        // document.getElementById("lblTotalDT").innerHTML = "";
        // document.getElementById("lblTotalSN").innerHTML = "";
        document.getElementById("lblTotalSL").innerHTML = dt;
        document.getElementById("lblQuality").innerHTML = dt;
        document.getElementById("lblTotalVolume").innerHTML = sn;
        if (sn == 0) {
            document.getElementById('warningwarehouse').textContent = "";
        }
        return ;
    }

    //Validation các các control

    //************************************
    //********************************************
    function Validation()
    {
        var stCheck=""
        stCheck=document.getElementById("cardData").value;
        if (stCheck=="" && @Model.ExportMode == @Constants.EXPORT_MODE_CARD)
        {
            alert("CardData: đang bị trống, bạn hãy nhập bổ sung");
            return false;
        }

        stCheck=document.getElementById("cardserial").value;
		if (stCheck=="" && @Model.ExportMode == @Constants.EXPORT_MODE_CARD)
        {
			alert("CardSerial: đang bị trống, bạn hãy nhập bổ sung");
			return false;
		}

        stCheck=document.getElementById("certificateNumber").value;
        if (stCheck=="")
        {
            alert("Số chứng từ: đang bị trống, bạn hãy nhập bổ sung");
            return false;
        }

        stCheck=document.getElementById("certificateTime").value;
        if (stCheck=="")
        {
            alert("Thời gian chứng từ: đang bị trống, bạn hãy nhập bổ sung");
            return false;
        }

        stCheck=document.getElementById("IdCustomer").value;
        if (stCheck=="")
        {
            alert("Mã khách hàng: đang bị trống, bạn hãy nhập bổ sung");
            return false;
        }

        stCheck=document.getElementById("VehicleNumber").value;
        if (stCheck=="")
        {
            alert("Số phương tiện: đang bị trống, bạn hãy nhập bổ sung");
            return false;
        }

        stCheck=document.getElementById("VehicleNumber").value;
        if (stCheck=="")
        {
            alert("Số phương tiện: đang bị trống, bạn hãy nhập bổ sung");
            return false;
        }

        stCheck=document.getElementById("DriverName").value;
        if (stCheck=="")
        {
            alert("Lái xe: đang bị trống, bạn hãy nhập bổ sung");
            return false;
        }

        stCheck =document.getElementById("lblTotalVolume").innerHTML;
        if (stCheck=="0")
        {
            alert("Bạn chưa nhập dữ liệu ở các ngăn trong phương tiện");
            return false;
        }

        stCheck =document.getElementById("Status").innerHTML;
        if (stCheck=="1")
        {
            alert("Có hai ngăn trùng nhau! Bạn không thể lưu");
            return false;
        }

        if (stCheck == "2") {
            alert("Có số ngăn không đúng! Bạn không thể lưu");
            return false;
        }

        $("#btnSave").prop("disabled", true);
        document.getElementById("frmRegister").submit();
    }




</script>


<script type="text/javascript">
    var lstoptionWareHouses = @Html.Raw(Json.Encode(@Model.LstWareHouse));
    var optionWareHouses;
    var optionVehicle;
    var optionCustomer;
    var DataCustomer;
    var optionDriver;
    setOption();
    function setOption() {
        optionWareHouses = {
            data: @Html.Raw(Json.Encode(@Model.LstWareHouse)),
            getValue: "name",
            template: {
                type: "custom",
                method: function(value, item) {
                    return item.type + " - " + value;
                }
            }
        };
        //$("#WareHouseName").easyAutocomplete(optionWareHouses);

        //var strWareHouseCode = document.getElementById("WareHouseCode").value;
        //for (var i = 0; i < lstoptionWareHouses.length; i++) {
        //    if (lstoptionWareHouses[i].type==strWareHouseCode){
        //        document.getElementById("WareHouseName").value= lstoptionWareHouses[i].name;
        //        document.getElementById('WareHouseName').setAttribute("disabled","disabled");
        //    }
        //}

        DataCustomer=@Html.Raw(Json.Encode(@Model.LstCustomer));

        optionCustomer = {
            data: @Html.Raw(Json.Encode(@Model.LstCustomer)),
            getValue: "name",
            template: {
                type: "description",
                fields: {
                    description: "type"
                }
            },
            list: {
                match: {
                    enabled: true
                },

                onHideListEvent: function () {
                //    //var selectedItemValue = $("#inputOne").getSelectedItemData().realName;

                    //    //$("#inputTwo").val(selectedItemValue).trigger("change");
                    var itemList = @Html.Raw(Json.Encode(@Model.LstCustomer));
                    for (var i = 0; i < itemList.length ; i+=1) {

                        //alert(itemList[i].name);
                        if (itemList[i].name === document.getElementById("IdCustomer").value) {
                            $("#certificateNumber").focus();
                        }

                    };
                },

            }
        };
        $("#IdCustomer").easyAutocomplete(optionCustomer);


        optionVehicle = {
            data: @Html.Raw(Json.Encode(@Model.LstVehicle)),
            getValue: "name",
            template: {
                type: "description",
                fields: {
                    description: "type"
                }
            },
            list: {
                match: {
                    enabled: true
                }
            }
        };

        $("#VehicleNumber").easyAutocomplete(optionVehicle);

        optionDriver={
            data: @Html.Raw(Json.Encode(@Model.LstDriver)),
            getValue: "name",
            template: {
                type: "description",
                fields: {
                    description: "type"
                }
            },
            list: {
                match: {
                    enabled: true
                },
                onHideListEvent: function () {
                    //var selectedItemValue = $("#inputOne").getSelectedItemData().realName;

                    //$("#inputTwo").val(selectedItemValue).trigger("change");
                    //alert("tét");
                    //$("#Discount_0").focus();
                },
            }
        };
        $("#DriverName").easyAutocomplete(optionDriver);

    }


    function GetDriverName(vehiclenumber) {
        var vehiclenumber = $("#VehicleNumber").val();
        $.ajax({
            url: '/Command/GetDriverNameByVehicleNumber/',
            type: 'GET',
            data: {
                "vehiclenumber": vehiclenumber
            },
            dataType: 'json',
            success: function (data) {
                var a = data;
                var chk = false;
                    datenow = new Date(Date.now()).toLocaleString();
                    sdatenow = new Date(datenow) ;
                for (var i = 0; i < data.length; i++) { // Cái data chi co 1 bản ghi
                    document.getElementById('DriverName').value = a[i].Driverdefault;
                    SearchDriver();
                    expiredate = a[i].ExpireDate;
                    if (expiredate != null) {
                    expiredatenow = new Date(parseInt(expiredate.substr(6)));
                    dateexpiredate = new Date(expiredatenow).toLocaleString();
                    sexpiredatenow = new Date(dateexpiredate);
                    if (sexpiredatenow < sdatenow) {
                        chk = true;
                        $("#expiredate").css("visibility","visible");
                    }
                    else {
                        $("#expiredate").css("visibility","hidden");
                    }
                    }

                    accreditationexpire = a[i].AccreditationExpire;
                    if (accreditationexpire != null) {
                    accreditationexpirenow = new Date(parseInt(accreditationexpire.substr(6)));
                    dateaccreditationexpire = new Date(accreditationexpirenow).toLocaleString();
                    saccreditationexpire = new Date(dateaccreditationexpire);
                    if (saccreditationexpire < sdatenow) {
                        chk = true;
                        $("#accreditationexpire").css("visibility","visible");
                    }
                    else {
                        $("#accreditationexpire").css("visibility","hidden");
                    }
                    }

                    firepreventdate = a[i].FirePreventExpire;
                    if (firepreventdate != null) {
                    firepreventdatenow = new Date(parseInt(firepreventdate.substr(6)));
                    datefireprevent = new Date(firepreventdatenow).toLocaleString();
                    sfireprevent = new Date(datefireprevent);
                    if (sfireprevent < sdatenow) {
                        chk = true;
                        $("#firepreventeexpire").css("visibility", "visible");
                    }
                    else {
                        $("#firepreventeexpire").css("visibility", "hidden");
                    }
                    }

                    if (chk == true) {
                        $("#warningvehicle").css("visibility","visible");
                    }
                }
            },
            error: function (err) {
                alert("Error: " + err.responseText);
            }
        });
        $("#DriverName").focus();
    }

    function GetCard(vehiclenumber) {
        var vehiclenumber = $("#VehicleNumber").val();
        if (vehiclenumber == "" || vehiclenumber ==null )
            return ;

        $.post("@Url.Action("GetCardDataByVehicleNumber", "Command")", { vehiclenumber: vehiclenumber }, function (data) {
            if (data != "") {
                if (data.CurrentFlag >= 0) {
                    document.getElementById('cardData').value = "";
                    document.getElementById('warningcommand').style.visibility = "visible";
                    alert("Thẻ đang được sử dụng trong hệ thống");
                    document.getElementById('warningcommand').textContent = "Thẻ đang được sử dụng trong hệ thống";
                    $("#Cardserial").focus();
                }
                else {
                    document.getElementById('cardserial').value = data.CardSerial;
                    document.getElementById('cardData').value = data.CardData;
                    document.getElementById('warningcommand').textContent = "";
                    document.getElementById('warningcommand').style.visibility = "hidden";
                }

            }
        });
         
        //var vehiclenumber = $("#VehicleNumber").val();
        //$.ajax({
        //    url: '/Command/GetCardDataByVehicleNumber/',
        //    type: 'GET',
        //    data: {
        //        "vehiclenumber": vehiclenumber
        //    },
        //    dataType: 'json',
        //    success: function (data) {
        //        document.getElementById('cardserial').value = data.cardserial;
        //        document.getElementById('cardData').value = data.cardData;
        //    },
        //    error: function (err) {
        //        alert("Error: " + err.responseText);
        //    }
        //});
        $("#DriverName").focus();
    }

    function GetCardDataByCardSerial(cardSerial) {
        var cardSerial = $("#cardserial").val();
        if (cardSerial=="" || cardSerial==null )
            return ;

        $.post("@Url.Action("GetCardDataByCardSerial", "Command")", { cardSerial: cardSerial }, function (data) {
            if (data!=""){

                if (data.CurrentFlag>=0)
                {
                    document.getElementById('cardData').value = "";
                    document.getElementById('warningcommand').style.visibility = "visible";
                    alert("Thẻ đang được sử dụng trong hệ thống");
                    document.getElementById('warningcommand').textContent = "Thẻ đang được sử dụng trong hệ thống";
                    $("#Cardserial").focus();
                }
                else
                {
                    document.getElementById('cardData').value = data.CardData;
                    document.getElementById('warningcommand').textContent = "";
                    document.getElementById('warningcommand').style.visibility = "hidden";
                }

            }
            else {
                document.getElementById('warningcommand').style.visibility = "visible";
                document.getElementById('warningcommand').textContent = "Thẻ không có trong danh mục";
                document.getElementById('cardData').value = "";
                document.getElementById('VehicleNumber').value = "";
                document.getElementById('DriverName').value = "";
                document.getElementById('IdCustomer').value = "";
                document.getElementById('warningvehicle').value = "";
                $("#Cardserial").focus();
                alert("Thẻ không có trong danh mục");
                return ;
            }

        });

    }

    //Reset bảng hàng hóa về O tại cột số 3
    function ResetProductTable(){
        var intcount=0;
        $('#ProductTable').find('input[type=text]').each(function () {
            if (intcount % 5 == 4) {
                $(this).val(0);
            }
            if (intcount % 5 == 3) {
                $(this).val("");
            }
            intcount = intcount + 1;
        });
    }



    function GetListVolume(){

        var i = 0;
        var intRow = 0;
        var intCol = 0
        var vehicleNumber = document.getElementById('VehicleNumber').value;

        for (var i = 0; i < 20; i++) {
            var inputName = "input[name = '["+i+"].Volume']";
            var test =$(inputName).val();

            if (test == '') {
                $("input[name = '["+i+"].Amount']").val(0);

                continue;
            }
            if (!$.isNumeric($(inputName).val())) {
                break;
            }
            var totalVolume = 0;
            for(k=0; k<test.length;k++){
                for (var j = 0; j <listJson.length; j++) {
                    if(test[k] ==  listJson[j].Volume){
                        totalVolume += listJson[j].Amount;
                        break;
                    }
                }
            }
            $("input[name = '["+i+"].Amount']").val(totalVolume);
        }


    }

</script>



