@model PetroBM.Web.Models.DispatchWaterModel
@using Newtonsoft.Json
@using PetroBM.Common.Util
@{
    ViewBag.Title = "Kho " + Session[Constants.Session_WareHouseName] + " > Đăng ký lệnh điều vận đường thủy";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("RegisterDispatchWater", "DispatchWater", FormMethod.Post, new { @id = "frmRegisterDispatch" }))
{
    @Html.AntiForgeryToken()

    <div class="container">

        <h4>Thông tin chung</h4>
        <table width="100%">
            <tr>
                <td width="50%">
                    <div class="col-md-10">
                        <div>
                            <div class="col-md-5">
                                @Html.LabelFor(model => model.Dispatch.CertificateNumber, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-7">
                                @Html.EditorFor(model => model.Dispatch.CertificateNumber, new { htmlAttributes = new { @class = "form-control", @id = "CertificateNumber", @readonly = "readonly" } })
                            </div>
                        </div>
                        <div style="padding-top:10%;">
                            <div class="col-md-5">
                                @Html.LabelFor(model => model.Dispatch.TimeStart, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-7">
                                <div class='input-group date' id='datetimepicker' style="z-index:1;">
                                    @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control", @id = "TimeStart" } })
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div style="padding-top:10%;">
                            <div class="col-md-5">
                                @Html.LabelFor(model => model.Dispatch.Department, htmlAttributes: new { @class = "control-label" })
                            </div>

                            <div class="col-md-7">
                                @Html.DropDownListFor(model => model.Dispatch.Department,
                                    new SelectList(
                                        new[]
                                        {
                                            new { Value = "Phân xưởng Vận tải thủy", Text = "Phân xưởng Vận tải thủy" },
                                            new { Value = "Phân xưởng Bốc xếp và Cảng", Text = "Phân xưởng Bốc xếp và Cảng" },
                                        },
                                        "Value",
                                        "Text",
                                        Model.Dispatch.Department
                                    ),
                                    "-- Chọn phân xưởng --",
                                    new { @class = "form-control", @id = "Department" })
                                @Html.ValidationMessageFor(model => model.Dispatch.Department, "", new { @class = "text-danger" })
                            </div>

                        </div>

                        <div style="padding-top:10%;">
                            <div class="col-md-5">
                                @Html.LabelFor(model => model.Dispatch.DstPickup2, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-7">
                                @Html.EditorFor(model => model.Dispatch.DstPickup2, new { htmlAttributes = new { @class = "form-control", @id = "DstPickup2", @tabindex = "7" } })
                            </div>
                        </div>
                        <div style="padding-top:10%;">
                            <div class="col-md-5">
                                @Html.LabelFor(model => model.Dispatch.DstReceive, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-7">
                                @*<div class='input-group date' id='' style="z-index:1;">*@
                                @Html.EditorFor(model => model.Dispatch.DstReceive, new { htmlAttributes = new { @class = "form-control", @id = "DstReceive", @tabindex = "8" } })
                                @*<span class="input-group-addon" onclick='showSearchC();'>
                    <span class="glyphicon glyphicon-chevron-down" id="drilldownC"></span>
                </span>*@
                                @*</div>*@
                            </div>
                        </div>

                        <div style="padding-top:10%;">
                            <div class="col-md-5">
                                @Html.LabelFor(model => model.Dispatch.VehicleNumber, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-7">
                                @Html.EditorFor(model => model.Dispatch.VehicleNumber, new { htmlAttributes = new { @class = "form-control", @id = "VehicleNumber", @onchange = "SearchVehicle()", @autofocus = "autofocus" } })
                            </div>
                        </div>
                        <div style="padding-top:10%;display:none;">
                            <div class="col-md-5">
                                @Html.LabelFor(model => model.Dispatch.DriverName1, htmlAttributes: new { @class = "control-label", style = "display:none;" })
                            </div>
                            <div class="col-md-7">
                                @Html.EditorFor(model => model.Dispatch.DriverName1, new { htmlAttributes = new { @class = "form-control", @id = "DriverName1", @tabindex = "1", style = "display:none;" } })
                            </div>
                        </div>

                        <div style="padding-top:10%;">
                            <div class="col-md-5">
                                @Html.LabelFor(model => model.Dispatch.DstPickup1, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-7">
                                @Html.EditorFor(model => model.Dispatch.DstPickup1, new { htmlAttributes = new { @class = "form-control", @id = "DstPickup1", @tabindex = "2" } })
                            </div>
                        </div>
                        <div style="padding-top:10%;display:none;">
                            <div class="col-md-5" style="display:none;">
                                <b>Nguyên tắc</b>
                            </div>
                            <div class="col-md-7">
                                @Html.EditorFor(model => model.Dispatch.Note1, new { htmlAttributes = new { @class = "form-control", @id = "Note1", @tabindex = "3", style = "display:none;" } })
                            </div>
                        </div>
                        <div style="padding-top:10%;display:none;">
                            <div class="col-md-5">
                                @Html.LabelFor(model => model.Dispatch.Remark, htmlAttributes: new { @class = "control-label", style = "display:none;" })
                            </div>
                            <div class="col-md-7">
                                @Html.EditorFor(model => model.Dispatch.Remark, new { htmlAttributes = new { @class = "form-control", @id = "Remark", @tabindex = "4", style = "display:none;" } })
                            </div>
                        </div>

                        <br>



                    </div>
                </td>
                <td width="50%">
                    <div class="col-md-10">
                        <div>
                            <div class="col-md-5">
                                @Html.LabelFor(model => model.Dispatch.TimeOrder, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-7">
                                <div class='input-group date' id='datetimepicker' style="z-index:1;">
                                    @Html.EditorFor(model => model.TimeOrder, new { htmlAttributes = new { @class = "form-control", @id = "TimeOrder", @readonly = "readonly" } })
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div style="padding-top:10%;display:none;">
                            <div class="col-md-5">
                                @Html.LabelFor(model => model.Dispatch.TimeStop, htmlAttributes: new { @class = "control-label", style = "display:none;" })
                            </div>
                            <div class="col-md-7">
                                <div class='input-group date' id='datetimepicker2' style="display:none;">
                                    @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control", @id = "TimeStop", style = "display:none;" } })
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div style="padding-top:10%;display:none;">
                            <div class="col-md-5">
                                @Html.LabelFor(model => model.Dispatch.ProductCode, htmlAttributes: new { @class = "control-label", style = "display:none;" })
                            </div>
                            <div class="col-md-7">
                                <div class='input-group date' style="z-index:1; display:none;">
                                    @Html.EditorFor(model => model.Dispatch.ProductCode, new { htmlAttributes = new { @class = "form-control", @id = "ProductCode", @tabindex = "5", style = "display:none;" } })
                                    <span class="input-group-addon" onclick='showSearchP();'>
                                        <span class="glyphicon glyphicon-chevron-down" id="drilldownP"></span>
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div id="SearchPro" style="padding-top: 10%; display: none">
                            <div class="form-control text-box single-line" style="height:100px">
                                <input class="form-control text-box single-line" data-val="true" data-val-length-max="100" id="SearchP" name="SearchP" tabindex="4" type="text" placeholder="Tìm kiếm">
                                <div class="checkbox-list" id="checkboxListP" style="max-height: 80px; overflow-y: scroll;">
                                    @foreach (var item in Model.ListProduct)
                                    {
                                        <label><input type="checkbox" value="@item.ProductCode" class="ItemCheckbox" onclick="getCheckedValuesP()">@item.ProductCode - @item.ProductName</label>
                                    }
                                </div>
                            </div>
                        </div>
                        <div style="padding-top:10%;display:none;">
                            <div class="col-md-5">
                                @Html.LabelFor(model => model.Dispatch.DriverName2, htmlAttributes: new { @class = "control-label", style = "display:none;" })
                            </div>
                            <div class="col-md-7">
                                @Html.EditorFor(model => model.Dispatch.DriverName2, new { htmlAttributes = new { @class = "form-control", @id = "DriverName2", @tabindex = "5", style = "display:none;" } })
                            </div>
                        </div>
                        

                        <div style="padding-top:10%;">
                            <div class="col-md-5">
                                @Html.LabelFor(model => model.Dispatch.Paragraph1, htmlAttributes: new { @class = "control-label" })
                            </div> <div class="col-md-7"> @Html.EditorFor(model => model.Dispatch.Paragraph1, new { htmlAttributes = new { @class = "form-control", @id = "Paragraph1", @tabindex = "24" } }) </div>
                        </div>

                        <div style="padding-top:10%;">
                            <div class="col-md-5"> @Html.LabelFor(model => model.Dispatch.Paragraph2, htmlAttributes: new { @class = "control-label" }) </div> <div class="col-md-7"> @Html.EditorFor(model => model.Dispatch.Paragraph2, new { htmlAttributes = new { @class = "form-control", @id = "Paragraph2", @tabindex = "25" } }) </div>
                        </div>

                        <div style="padding-top:10%;">
                            <div class="col-md-5"> @Html.LabelFor(model => model.Dispatch.Paragraph3, htmlAttributes: new { @class = "control-label" }) </div> <div class="col-md-7"> @Html.EditorFor(model => model.Dispatch.Paragraph3, new { htmlAttributes = new { @class = "form-control", @id = "Paragraph3", @tabindex = "26" } }) </div>
                        </div>
                        <div style="padding-top:10%;">
                            <div class="col-md-5"> @Html.LabelFor(model => model.Dispatch.Paragraph4, htmlAttributes: new { @class = "control-label" }) </div>
                            <div class="col-md-7"> @Html.EditorFor(model => model.Dispatch.Paragraph4, new { htmlAttributes = new { @class = "form-control", @id = "Paragraph4", @tabindex = "20" } }) </div>
                        </div>
                        <div style="padding-top:10%;">
                            <div class="col-md-5"> @Html.LabelFor(model => model.Dispatch.From, htmlAttributes: new { @class = "control-label" }) </div>
                            <div class="col-md-7">@Html.TextBoxFor(model => model.Dispatch.From, new { @class = "form-control", @id = "From", @tabindex = "21", @Value = Model.Dispatch?.From ?? "khi có lệnh" })</div>
                        </div>

                        <div style="padding-top:10%;">
                            <div class="col-md-5"> @Html.LabelFor(model => model.Dispatch.To, htmlAttributes: new { @class = "control-label" }) </div>
                            <div class="col-md-7"> @Html.TextBoxFor(model => model.Dispatch.To, new { @class = "form-control", @id = "To", @tabindex = "22", @Value = Model.Dispatch?.To ?? "khi thực hiện xong công việc" })</div>
                        </div>

                        <div id="SearchCust" style="padding-top: 10%; display: none">
                            <div class="form-control text-box single-line" style="height:140px">
                                <input class="form-control text-box single-line" data-val="true" data-val-length-max="100" id="SearchC" name="SearchC" tabindex="4" type="text" placeholder="Tìm kiếm">
                                <div class="checkbox-list" id="checkboxListC" style="max-height: 80px; overflow-y: scroll;">
                                    @foreach (var item in Model.ListCustomer)
                                    {
                                        <label><input type="checkbox" value="@item.CustomerCode" class="ItemCheckbox" onclick="getCheckedValuesC()">@item.CustomerCode - @item.CustomerName</label>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </td>
            </tr>

        </table>
    </div>
    <br>
    <div>
        <p>
            <button type="button" class="btn btn-success" onclick='Validation();' id="btnSave">Lưu</button>
            <button type="button" class="btn btn-primary" onclick="location.href='@Url.Action("DispatchDetailWater")'">Hủy</button>
        </p>
    </div>
}

<script src="~/Scripts/jquery-2.2.4.min.js"></script>
<script src="~/Scripts/Autocomplete/jquery.easy-autocomplete.js"></script>
<link href="~/Scripts/Autocomplete/easy-autocomplete.css" rel="stylesheet" />

<script type="text/javascript">
    $(function () {
        $('#datetimepicker').datetimepicker({ format: 'DD/MM/YYYY HH:mm' });
        $('#datetimepicker2').datetimepicker({ format: 'DD/MM/YYYY HH:mm' });
        $('#jCertificateTime').datetimepicker({ format: 'DD/MM/YYYY HH:mm' });
    });

</script>

<script>
    document.getElementById('SearchC').addEventListener('input', function () {
        var filter = this.value.toLowerCase();
        var checkboxes = document.getElementById('checkboxListC').getElementsByTagName('label');

        for (var i = 0; i < checkboxes.length; i++) {
            var label = checkboxes[i].innerText || checkboxes[i].textContent;
            if (label.toLowerCase().indexOf(filter) > -1) {
                checkboxes[i].style.display = "";
            } else {
                checkboxes[i].style.display = "none";
            }
        }
    });

    document.getElementById('SearchP').addEventListener('input', function () {
        var filter = this.value.toLowerCase();
        var checkboxes = document.getElementById('checkboxListP').getElementsByTagName('label');

        for (var i = 0; i < checkboxes.length; i++) {
            var label = checkboxes[i].innerText || checkboxes[i].textContent;
            if (label.toLowerCase().indexOf(filter) > -1) {
                checkboxes[i].style.display = "";
            } else {
                checkboxes[i].style.display = "none";
            }
        }
    });
</script>

<script type="text/javascript">

    //Validation các các control

    //************************************
    //********************************************
    function showSearchC() {
        if (document.getElementById('SearchCust').style.display == "none") {
            document.getElementById('SearchCust').style.display = "block";
            document.getElementById('drilldownC').className = "glyphicon glyphicon-chevron-up";
        }
        else {
            document.getElementById('SearchCust').style.display = "none";
            document.getElementById('drilldownC').className = "glyphicon glyphicon-chevron-down";
        }
    }

    function showSearchP() {
        if (document.getElementById('SearchPro').style.display == "none") {
            document.getElementById('SearchPro').style.display = "block";
            document.getElementById('drilldownP').className = "glyphicon glyphicon-chevron-up";
        }
        else {
            document.getElementById('SearchPro').style.display = "none";
            document.getElementById('drilldownP').className = "glyphicon glyphicon-chevron-down";
        }
    }

    function getCheckedValuesC() {
        var checkboxes = document.querySelectorAll('#checkboxListC .ItemCheckbox:checked');
        var checkedValues = '';

        checkboxes.forEach(function (checkbox) {
            checkedValues += checkbox.value + ",";
        });
        document.getElementById("DstReceive").value = checkedValues;

    }

    function getCheckedValuesP() {
        var checkboxes = document.querySelectorAll('#checkboxListP .ItemCheckbox:checked');
        var checkedValues = '';

        checkboxes.forEach(function (checkbox) {
            checkedValues += checkbox.value + ",";
        });
        document.getElementById("ProductCode").value = checkedValues;

    }

    function Validation() {
        var stCheck = "";

        var driver1 = document.getElementById("DriverName1");
        if (driver1 && driver1.value.trim() === "") driver1.value = "NULL";

        var driver2 = document.getElementById("DriverName2");
        if (driver2 && driver2.value.trim() === "") driver2.value = "NULL";

        var remark = document.getElementById("Remark");
        if (remark && remark.value.trim() === "") remark.value = "NULL";

        var note1 = document.getElementById("Note1");
        if (note1 && note1.value.trim() === "") note1.value = "NULL";

        var productCode = document.getElementById("ProductCode");
        if (productCode && productCode.value.trim() === "") productCode.value = "01";

        var timeStop = document.getElementById("TimeStop");
        var timeOrder = document.getElementById("TimeOrder");
        if (true) {
            if (timeOrder) timeStop.value = timeOrder.value;
        }



        stCheck = document.getElementById("CertificateNumber").value;
        if (stCheck == "") {
            alert("Số chứng từ: đang bị trống, bạn hãy nhập bổ sung");
            return false;
        }

        stCheck = document.getElementById("DriverName1").value;
        if (stCheck == "") {
            alert("Lái xe 1: đang bị trống, bạn hãy nhập bổ sung");
            return false;
        }

        stCheck = document.getElementById("DstPickup1").value;
        if (stCheck == "") {
            alert("Điểm lấy hàng 1: đang bị trống, bạn hãy nhập bổ sung");
            return false;
        }

        stCheck = document.getElementById("ProductCode").value;
        if (stCheck == "") {
            alert("Hàng hoá: đang bị trống, bạn hãy nhập bổ sung");
            return false;
        }

        stCheck = document.getElementById("DstReceive").value;
        if (stCheck == "") {
            alert("Điểm trả hàng: đang bị trống, bạn hãy nhập bổ sung");
            return false;
        }

        stCheck = document.getElementById("Note1").value;
        if (stCheck == "") {
            alert("Nguyên tắc: đang bị trống, bạn hãy nhập bổ sung");
            return false;
        }

        stCheck = document.getElementById("Department").value;
        if (stCheck == "") {
            alert("Phân xưởng : đang bị trống, bạn hãy nhập bổ sung");
            return false;
        }

        $("#btnSave").prop("disabled", true);
        document.getElementById("frmRegisterDispatch").submit();
    }

</script>

<script type="text/javascript">
    var lstoptionWareHouses = @Html.Raw(Json.Encode(@Model.LstWareHouse));
    var optionWareHouses;
    var optionVehicle;
    var optionCustomer;
    var DataCustomer;
    var optionDriver;
    setOption();
    function setOption() {
        optionWareHouses = {
            data: @Html.Raw(Json.Encode(@Model.LstWareHouse)),
            getValue: "name",
            template: {
                type: "custom",
                method: function(value, item) {
                    return item.type + " - " + value;
                }
            }
        };
        //$("#WareHouseName").easyAutocomplete(optionWareHouses);

        //var strWareHouseCode = document.getElementById("WareHouseCode").value;
        //for (var i = 0; i < lstoptionWareHouses.length; i++) {
        //    if (lstoptionWareHouses[i].type==strWareHouseCode){
        //        document.getElementById("WareHouseName").value= lstoptionWareHouses[i].name;
        //        document.getElementById('WareHouseName').setAttribute("disabled","disabled");
        //    }
        //}

        DataCustomer=@Html.Raw(Json.Encode(@Model.LstCustomer));

        optionCustomer = {
            data: @Html.Raw(Json.Encode(@Model.LstCustomer)),
            getValue: "name",
            template: {
                type: "description",
                fields: {
                    description: "type"
                }
            },
            list: {
                match: {
                    enabled: true
                },

                onHideListEvent: function () {
                //    //var selectedItemValue = $("#inputOne").getSelectedItemData().realName;

                    //    //$("#inputTwo").val(selectedItemValue).trigger("change");
                    var itemList = @Html.Raw(Json.Encode(@Model.LstCustomer));
                    for (var i = 0; i < itemList.length ; i+=1) {

                        //alert(itemList[i].name);
                        if (itemList[i].name === document.getElementById("IdCustomer").value) {
                            $("#certificateNumber").focus();
                        }

                    };
                },

            }
        };
        $("#IdCustomer").easyAutocomplete(optionCustomer);


        optionVehicle = {
            data: @Html.Raw(Json.Encode(@Model.LstVehicle)),
            getValue: "name",
            template: {
                type: "description",
                fields: {
                    description: "type"
                }
            },
            list: {
                match: {
                    enabled: true
                }
            }
        };

        $("#VehicleNumber").easyAutocomplete(optionVehicle);

        optionDriver1={
            data: @Html.Raw(Json.Encode(@Model.LstDriver)),
            getValue: "name",
            template: {
                type: "description",
                fields: {
                    description: "type"
                }
            },
            list: {
                match: {
                    enabled: true
                },
                onHideListEvent: function () {
                    //var selectedItemValue = $("#inputOne").getSelectedItemData().realName;

                    //$("#inputTwo").val(selectedItemValue).trigger("change");
                    //alert("tét");
                    //$("#Discount_0").focus();
                },
            }
        };
        $("#DriverName1").easyAutocomplete(optionDriver1);

        optionDriver2={
            data: @Html.Raw(Json.Encode(@Model.LstDriver)),
            getValue: "name",
            template: {
                type: "description",
                fields: {
                    description: "type"
                }
            },
            list: {
                match: {
                    enabled: true
                },
                onHideListEvent: function () {
                    //var selectedItemValue = $("#inputOne").getSelectedItemData().realName;

                    //$("#inputTwo").val(selectedItemValue).trigger("change");
                    //alert("tét");
                    //$("#Discount_0").focus();
                },
            }
        };
        $("#DriverName2").easyAutocomplete(optionDriver2);

        @*optionProduct={
            data: @Html.Raw(Json.Encode(@Model.LstProduct)),
            getValue: "name",
            template: {
                type: "description",
                fields: {
                    description: "type"
                }
            },
            list: {
                match: {
                    enabled: true
                },
                onHideListEvent: function () {
                    //var selectedItemValue = $("#inputOne").getSelectedItemData().realName;

                    //$("#inputTwo").val(selectedItemValue).trigger("change");
                    //alert("tét");
                    //$("#Discount_0").focus();
                },
            }
        };
        $("#ProductCode").easyAutocomplete(optionProduct);*@

        @*optionDepartment ={
            data: @Html.Raw(Json.Encode(@Model.LstDepartment)),
            getValue: "name",
            template: {
                type: "description",
                fields: {
                    description: "type"
                }
            },
            list: {
                match: {
                    enabled: true
                },
                onHideListEvent: function () {
                    //var selectedItemValue = $("#inputOne").getSelectedItemData().realName;

                    //$("#inputTwo").val(selectedItemValue).trigger("change");
                    //alert("tét");
                    //$("#Discount_0").focus();
                },
            }
        };
        $("#Department").easyAutocomplete(optionDepartment);*@

        optionDstPickup1 ={
            data: @Html.Raw(Json.Encode(@Model.LstWareHouse)),
            getValue: "name",
            template: {
                type: "description",
                fields: {
                    description: "type"
                }
            },
            list: {
                match: {
                    enabled: true
                },
                onHideListEvent: function () {
                    //var selectedItemValue = $("#inputOne").getSelectedItemData().realName;

                    //$("#inputTwo").val(selectedItemValue).trigger("change");
                    //alert("tét");
                    //$("#Discount_0").focus();
                },
            }
        };
        $("#DstPickup1").easyAutocomplete(optionDstPickup1);

        optionDstPickup2 ={
            data: @Html.Raw(Json.Encode(@Model.LstWareHouse)),
            getValue: "name",
            template: {
                type: "description",
                fields: {
                    description: "type"
                }
            },
            list: {
                match: {
                    enabled: true
                },
                onHideListEvent: function () {
                    //var selectedItemValue = $("#inputOne").getSelectedItemData().realName;

                    //$("#inputTwo").val(selectedItemValue).trigger("change");
                    //alert("tét");
                    //$("#Discount_0").focus();
                },
            }
        };
        $("#DstPickup2").easyAutocomplete(optionDstPickup2);


optionDstReceive ={
            data: @Html.Raw(Json.Encode(@Model.LstWareHouse)),
            getValue: "name",
            template: {
                type: "description",
                fields: {
                    description: "type"
                }
            },
            list: {
                match: {
                    enabled: true
                },
                onHideListEvent: function () {
                    //var selectedItemValue = $("#inputOne").getSelectedItemData().realName;

                    //$("#inputTwo").val(selectedItemValue).trigger("change");
                    //alert("tét");
                    //$("#Discount_0").focus();
                },
            }
        };
        $("#DstReceive").easyAutocomplete(optionDstReceive);
        @*optionDstReceive ={
            data: @Html.Raw(Json.Encode(@Model.LstCustomer)),
            getValue: "name",
            template: {
                type: "description",
                fields: {
                    description: "type"
                }
            },
            list: {
                match: {
                    enabled: true
                },
                onHideListEvent: function () {
                    //var selectedItemValue = $("#inputOne").getSelectedItemData().realName;

                    //$("#inputTwo").val(selectedItemValue).trigger("change");
                    //alert("tét");
                    //$("#Discount_0").focus();
                },
            }
        };
        $("#DstReceive").easyAutocomplete(optionDstReceive);*@

    }
    function SearchVehicle() {
        $.post("@Url.Action("Detail", "Vehicle")", { identificationNumber: document.getElementById('VehicleNumber').value }, function (data) {
            listJson = data;
            GetDriverName();
        });
        return true;
    }
    function GetDriverName(vehiclenumber) {
        var vehiclenumber = $("#VehicleNumber").val();
        $.ajax({
            url: '/Command/GetDriverNameByVehicleNumber/',
            type: 'GET',
            data: {
                "vehiclenumber": vehiclenumber
            },
            dataType: 'json',
            success: function (data) {
                var a = data;
                var chk = false;
                datenow = new Date(Date.now()).toLocaleString();
                sdatenow = new Date(datenow);
                for (var i = 0; i < data.length; i++) { // Cái data chi co 1 bản ghi
                    document.getElementById('DriverName1').value = a[i].Driverdefault;
                }
            },
            error: function (err) {
                alert("Error: " + err.responseText);
            }
        });
        $("#DriverName1").focus();
    }

</script>





